from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional
import os
from datetime import datetime
import logging
from emailNotification.email import create_email_content, send_email
from database.db import save_notification_log, get_notification_log

app = FastAPI(title="Notification Service")
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NotificationRequest(BaseModel):
    user_id: str
    email: str
    notification_type: str
    content: dict
    order_id: Optional[str] = None

class NotificationResponse(BaseModel):
    status: str
    notification_id: str
    timestamp: str

class NotificationLog(BaseModel):
    notification_id: str
    user_id: str
    email: str
    notification_type: str
    status: str
    error: Optional[str] = None
    timestamp: str

@app.post("/send-notification", response_model=NotificationResponse)
async def send_notification(request: NotificationRequest):
    try:
        # Create email content
        subject, html_content = create_email_content(request.notification_type, request.content)
        
        # Send email
        success = await send_email(request.email, subject, html_content)
        
        # Prepare log
        log_entry = {
            "user_id": request.user_id,
            "email": request.email,
            "notification_type": request.notification_type,
            "status": "success" if success else "failed",
            "error": None if success else "Email sending failed",
            "timestamp": datetime.utcnow().isoformat()
        }
        
        # Save to MongoDB
        notification_id = await save_notification_log(log_entry)
        log_entry["notification_id"] = notification_id
        
        return NotificationResponse(
            status=log_entry["status"],
            notification_id=notification_id,
            timestamp=log_entry["timestamp"]
        )
    except Exception as e:
        logger.error(f"Error processing notification: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/notification-log/{notification_id}", response_model=NotificationLog)
async def get_notification_log_endpoint(notification_id: str):
    log = await get_notification_log(notification_id)
    if not log:
        raise HTTPException(status_code=404, detail="Notification not found")
    return NotificationLog(**log)

@app.get("/health")
async def health_check():
    return {"status": "healthy"}
